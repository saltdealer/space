package de.greenrobot.daoMyFun;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daoMyFun.Tribe_Relationship;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRIBE__RELATIONSHIP.
*/
public class Tribe_RelationshipDao extends AbstractDao<Tribe_Relationship, Long> {

    public static final String TABLENAME = "TRIBE__RELATIONSHIP";

    /**
     * Properties of entity Tribe_Relationship.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Normal_id = new Property(1, String.class, "normal_id", false, "NORMAL_ID");
        public final static Property Hx_id = new Property(2, String.class, "hx_id", false, "HX_ID");
        public final static Property Present_name = new Property(3, String.class, "present_name", false, "PRESENT_NAME");
        public final static Property Is_group = new Property(4, boolean.class, "is_group", false, "IS_GROUP");
        public final static Property Image_path = new Property(5, String.class, "image_path", false, "IMAGE_PATH");
        public final static Property Location = new Property(6, long.class, "location", false, "LOCATION");
    };


    public Tribe_RelationshipDao(DaoConfig config) {
        super(config);
    }
    
    public Tribe_RelationshipDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRIBE__RELATIONSHIP' (" + //
                "'_id' INTEGER PRIMARY KEY ASC AUTOINCREMENT ," + // 0: id
                "'NORMAL_ID' TEXT NOT NULL UNIQUE ," + // 1: normal_id
                "'HX_ID' TEXT NOT NULL UNIQUE ," + // 2: hx_id
                "'PRESENT_NAME' TEXT NOT NULL ," + // 3: present_name
                "'IS_GROUP' INTEGER NOT NULL ," + // 4: is_group
                "'IMAGE_PATH' TEXT," + // 5: image_path
                "'LOCATION' INTEGER NOT NULL );"); // 6: location
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRIBE__RELATIONSHIP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Tribe_Relationship entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNormal_id());
        stmt.bindString(3, entity.getHx_id());
        stmt.bindString(4, entity.getPresent_name());
        stmt.bindLong(5, entity.getIs_group() ? 1l: 0l);
 
        String image_path = entity.getImage_path();
        if (image_path != null) {
            stmt.bindString(6, image_path);
        }
        stmt.bindLong(7, entity.getLocation());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Tribe_Relationship readEntity(Cursor cursor, int offset) {
        Tribe_Relationship entity = new Tribe_Relationship( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // normal_id
            cursor.getString(offset + 2), // hx_id
            cursor.getString(offset + 3), // present_name
            cursor.getShort(offset + 4) != 0, // is_group
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // image_path
            cursor.getLong(offset + 6) // location
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Tribe_Relationship entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNormal_id(cursor.getString(offset + 1));
        entity.setHx_id(cursor.getString(offset + 2));
        entity.setPresent_name(cursor.getString(offset + 3));
        entity.setIs_group(cursor.getShort(offset + 4) != 0);
        entity.setImage_path(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLocation(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Tribe_Relationship entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Tribe_Relationship entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
