package de.greenrobot.daoMyFun;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daoMyFun.Conversation_msg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONVERSATION_MSG.
*/
public class Conversation_msgDao extends AbstractDao<Conversation_msg, Long> {

    public static final String TABLENAME = "CONVERSATION_MSG";

    /**
     * Properties of entity Conversation_msg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Con_id = new Property(1, String.class, "con_id", false, "CON_ID");
        public final static Property Msg_id = new Property(2, String.class, "msg_id", false, "MSG_ID");
        public final static Property User_id = new Property(3, String.class, "user_id", false, "USER_ID");
        public final static Property Group_id = new Property(4, String.class, "group_id", false, "GROUP_ID");
        public final static Property Status = new Property(5, Integer.class, "status", false, "STATUS");
        public final static Property Time = new Property(6, Long.class, "time", false, "TIME");
    };


    public Conversation_msgDao(DaoConfig config) {
        super(config);
    }
    
    public Conversation_msgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONVERSATION_MSG' (" + //
                "'_id' INTEGER PRIMARY KEY ASC AUTOINCREMENT ," + // 0: id
                "'CON_ID' TEXT," + // 1: con_id
                "'MSG_ID' TEXT," + // 2: msg_id
                "'USER_ID' TEXT," + // 3: user_id
                "'GROUP_ID' TEXT," + // 4: group_id
                "'STATUS' INTEGER," + // 5: status
                "'TIME' INTEGER);"); // 6: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONVERSATION_MSG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Conversation_msg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String con_id = entity.getCon_id();
        if (con_id != null) {
            stmt.bindString(2, con_id);
        }
 
        String msg_id = entity.getMsg_id();
        if (msg_id != null) {
            stmt.bindString(3, msg_id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(4, user_id);
        }
 
        String group_id = entity.getGroup_id();
        if (group_id != null) {
            stmt.bindString(5, group_id);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(6, status);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(7, time);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Conversation_msg readEntity(Cursor cursor, int offset) {
        Conversation_msg entity = new Conversation_msg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // con_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // msg_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // group_id
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Conversation_msg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCon_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsg_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroup_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Conversation_msg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Conversation_msg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
